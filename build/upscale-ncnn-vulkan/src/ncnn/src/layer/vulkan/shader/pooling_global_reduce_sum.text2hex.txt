#version 450
#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif
#define shape_constant_id_offset 0
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int c = 0;
layout (constant_id = shape_constant_id_offset + 2) const int cstep = 0;
layout (constant_id = shape_constant_id_offset + 3) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 4) const int outcstep = 0;
#if NCNN_image_shader
layout (binding = 0) uniform highp sampler3D bottom_blob;
layout (binding = 1, r32f) writeonly uniform highp image3D top_blob;
#else
layout (binding = 0) readonly buffer bottom_blob { float bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { float top_blob_data[]; };
#endif
layout (push_constant) uniform parameter
{
int w;
int c;
int cstep;
int outw;
int outcstep;
} p;
void main()
{
int gx = int(gl_GlobalInvocationID.x);
int gy = int(gl_GlobalInvocationID.y);
int gz = int(gl_GlobalInvocationID.z);
if (gx >= psc(outw) || gy >= 1 || gz >= psc(c))
return;
const int end = min(8, (psc(w) - gx - 1) / psc(outw) + 1);
const int v_offset = gz * psc(cstep);
float sum = 0.f;
for (int ii = 0; ii < end; ii++)
{
int i = gx + ii * psc(outw);
#if NCNN_image_shader
float v = texelFetch(bottom_blob, ivec3(i, 0, gz), 0).r;
#else
float v = bottom_blob_data[v_offset + i];
#endif
sum += v;
}
#if NCNN_image_shader
imageStore(top_blob, ivec3(gx, 0, gz), vec4(sum));
#else
top_blob_data[gz * psc(outcstep) + gx] = sum;
#endif
}
